import { beginCell, Address } from '@ton/ton';
import { mnemonicToPrivateKey, sign } from '@ton/crypto';
import { WalletContractV4 } from '@ton/ton';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç seqno –∫–æ—à–µ–ª—å–∫–∞
 */
async function getSeqno(walletAddress) {
    try {
        const response = await fetch(
            `https://toncenter.com/api/v2/runGetMethod?address=${walletAddress}&method=seqno`
        );
        const data = await response.json();

        if (data.result && data.result.stack && data.result.stack.length > 0) {
            return parseInt(data.result.stack[0][1], 16);
        }

        return 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è seqno:', error);
        return 0;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç subwallet_id –∫–æ—à–µ–ª—å–∫–∞
 */
async function getSubwalletId(walletAddress) {
    try {
        const response = await fetch(
            `https://toncenter.com/api/v2/runGetMethod?address=${walletAddress}&method=get_subwallet_id`
        );
        const data = await response.json();

        if (data.result && data.result.stack && data.result.stack.length > 0) {
            return parseInt(data.result.stack[0][1], 16);
        }

        return 698983191; // default –¥–ª—è v4r2
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è subwallet_id:', error);
        return 698983191;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç external message –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ (op = 2)
 */
export async function createInstallPluginExternalMessage(
    mnemonicWords,
    walletAddress,
    pluginAddress,
    amount = 50000000 n
) {
    try {
        console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ external message –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ (op=2)');

        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
        const keyPair = await mnemonicToPrivateKey(mnemonicWords.split(' '));
        console.log('‚úì –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
        const seqno = await getSeqno(walletAddress);
        const subwalletId = await getSubwalletId(walletAddress);

        console.log('üìä Seqno:', seqno);
        console.log('üîë Subwallet ID:', subwalletId);

        // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –ø–ª–∞–≥–∏–Ω–∞
        const pluginAddr = Address.parse(pluginAddress);
        const wc = pluginAddr.workChain;
        const hash = pluginAddr.hash;

        console.log('üìç Plugin WC:', wc);
        console.log('üìç Plugin Hash:', hash.toString('hex'));

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)
        const validUntil = Math.floor(Date.now() / 1000) + 600;
        const queryId = BigInt(Date.now());

        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ recv_external + op=2
        const bodyToSign = beginCell()
            .storeUint(subwalletId, 32) // subwallet_id
            .storeUint(validUntil, 32) // valid_until
            .storeUint(seqno, 32) // msg_seqno
            .storeUint(2, 8) // op = 2 (install plugin)
            .storeInt(wc, 8) // workchain
            .storeUint(BigInt('0x' + hash.toString('hex')), 256) // address hash
            .storeCoins(amount) // amount
            .storeUint(queryId, 64) // query_id
            .endCell();

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
        const signature = sign(bodyToSign.hash(), keyPair.secretKey);
        console.log('‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ');

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        const body = beginCell()
            .storeBuffer(signature)
            .storeSlice(bodyToSign.asSlice())
            .endCell();

        // –°–æ–∑–¥–∞–µ–º external message
        const externalMessage = beginCell()
            .storeUint(0b10, 2) // ext_in_msg_info$10
            .storeUint(0, 2) // src:MsgAddressExt (addr_none$00)
            .storeAddress(Address.parse(walletAddress))
            .storeCoins(0)
            .storeBit(0) // no state_init
            .storeBit(1) // body as ref
            .storeRef(body)
            .endCell();

        const boc = externalMessage.toBoc().toString('base64');
        console.log('‚úÖ External message —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', boc.length);

        return boc;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è external message:', error);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç external message –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ (op = 3)
 */
export async function createRemovePluginExternalMessage(
    mnemonicWords,
    walletAddress,
    pluginAddress,
    amount = 50000000 n
) {
    try {
        console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ external message –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ (op=3)');

        const keyPair = await mnemonicToPrivateKey(mnemonicWords.split(' '));
        console.log('‚úì –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã');

        const seqno = await getSeqno(walletAddress);
        const subwalletId = await getSubwalletId(walletAddress);

        console.log('üìä Seqno:', seqno);
        console.log('üîë Subwallet ID:', subwalletId);

        const pluginAddr = Address.parse(pluginAddress);
        const wc = pluginAddr.workChain;
        const hash = pluginAddr.hash;

        console.log('üìç Plugin WC:', wc);
        console.log('üìç Plugin Hash:', hash.toString('hex'));

        const validUntil = Math.floor(Date.now() / 1000) + 600;
        const queryId = BigInt(Date.now());

        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ recv_external + op=3
        const bodyToSign = beginCell()
            .storeUint(subwalletId, 32)
            .storeUint(validUntil, 32)
            .storeUint(seqno, 32)
            .storeUint(3, 8) // op = 3 (remove plugin)
            .storeInt(wc, 8)
            .storeUint(BigInt('0x' + hash.toString('hex')), 256)
            .storeCoins(amount)
            .storeUint(queryId, 64)
            .endCell();

        const signature = sign(bodyToSign.hash(), keyPair.secretKey);
        console.log('‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ');

        const body = beginCell()
            .storeBuffer(signature)
            .storeSlice(bodyToSign.asSlice())
            .endCell();

        const externalMessage = beginCell()
            .storeUint(0b10, 2)
            .storeUint(0, 2)
            .storeAddress(Address.parse(walletAddress))
            .storeCoins(0)
            .storeBit(0)
            .storeBit(1)
            .storeRef(body)
            .endCell();

        const boc = externalMessage.toBoc().toString('base64');
        console.log('‚úÖ External message —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', boc.length);

        return boc;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è external message:', error);
        throw error;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç external message –≤ —Å–µ—Ç—å
 */
export async function sendExternalMessage(boc) {
    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ external message...');

        const response = await fetch('https://toncenter.com/api/v2/sendBoc', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                boc: boc
            })
        });

        const data = await response.json();
        console.log('üì® –û—Ç–≤–µ—Ç –æ—Ç TonCenter:', data);

        if (data.ok) {
            console.log('‚úÖ External message –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log('Hash:', data.result ? .hash);
            return data.result;
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        throw error;
    }
}