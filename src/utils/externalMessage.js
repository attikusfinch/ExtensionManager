import { Address, TonClient, WalletContractV4 } from '@ton/ton';
import { mnemonicToPrivateKey } from '@ton/crypto';

let tonClient = null;

function getTonClient() {
  if (!tonClient) {
    tonClient = new TonClient({
      endpoint: 'https://toncenter.com/api/v2/jsonRPC',
    });
  }
  return tonClient;
}

export async function createInstallPluginExternalMessage(
  mnemonicWords,
  walletAddress,
  pluginAddress,
  amount = 50000000n
) {
  try {
    console.log('üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ (op=2)');
    
    const client = getTonClient();
    const keyPair = await mnemonicToPrivateKey(mnemonicWords.split(' '));
    console.log('‚úì –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã');
    
    const wallet = client.open(WalletContractV4.create({
      publicKey: keyPair.publicKey,
      workchain: 0
    }));
    
    console.log('‚úì Wallet —Å–æ–∑–¥–∞–Ω:', wallet.address.toString());
    
    const seqno = await wallet.getSeqno();
    console.log('üìä Seqno:', seqno);
    
    const pluginAddr = Address.parse(pluginAddress);
    console.log('üìç Plugin:', pluginAddr.toString());
    
    const tx = await wallet.createAddPlugin({
      seqno: seqno,
      secretKey: keyPair.secretKey,
      address: pluginAddr,
      forwardAmount: amount,
      queryId: BigInt(Date.now())
    });
    
    console.log('‚úÖ Tx –≥–æ—Ç–æ–≤');
    
    return { tx, wallet };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    throw error;
  }
}

export async function createRemovePluginExternalMessage(
  mnemonicWords,
  walletAddress,
  pluginAddress,
  amount = 50000000n
) {
  try {
    console.log('üîê –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ (op=3)');
    
    const client = getTonClient();
    const keyPair = await mnemonicToPrivateKey(mnemonicWords.split(' '));
    console.log('‚úì –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã');
    
    const wallet = client.open(WalletContractV4.create({
      publicKey: keyPair.publicKey,
      workchain: 0
    }));
    
    console.log('‚úì Wallet —Å–æ–∑–¥–∞–Ω:', wallet.address.toString());
    
    const seqno = await wallet.getSeqno();
    console.log('üìä Seqno:', seqno);
    
    const pluginAddr = Address.parse(pluginAddress);
    console.log('üìç Plugin:', pluginAddr.toString());
    
    const tx = await wallet.createRemovePlugin({
      seqno: seqno,
      secretKey: keyPair.secretKey,
      address: pluginAddr,
      forwardAmount: amount,
      queryId: BigInt(Date.now())
    });
    
    console.log('‚úÖ Tx –≥–æ—Ç–æ–≤');
    
    return { tx, wallet };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    throw error;
  }
}

export async function sendExternalMessage(result) {
  try {
    console.log('‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...');
    
    const { tx, wallet } = result;
    await wallet.send(tx);
    
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    console.log('üìù Hash:', tx.hash().toString('hex'));
    
    return { ok: true, hash: tx.hash().toString('hex') };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    throw error;
  }
}

