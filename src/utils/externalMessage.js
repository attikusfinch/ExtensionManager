import { beginCell, Address, sign } from '@ton/ton';
import { mnemonicToPrivateKey } from '@ton/crypto';

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç external message –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ (op = 3)
 */
export async function createRemovePluginExternalMessage(
  mnemonic,
  walletAddress,
  pluginAddress,
  subwalletId = 698983191,
  amount = 50000000n
) {
  try {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ external message –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
    const keyPair = await mnemonicToPrivateKey(mnemonic.split(' '));
    console.log('‚úì –ö–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º seqno
    const seqno = await getSeqno(walletAddress);
    console.log('üìä Seqno:', seqno);
    
    // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –ø–ª–∞–≥–∏–Ω–∞
    const pluginAddr = Address.parse(pluginAddress);
    const wc = pluginAddr.workChain;
    const hash = pluginAddr.hash;
    
    console.log('üìç Plugin WC:', wc);
    console.log('üìç Plugin Hash:', hash.toString('hex'));
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)
    const validUntil = Math.floor(Date.now() / 1000) + 600; // 10 –º–∏–Ω—É—Ç
    const queryId = BigInt(Date.now());
    
    const messageBody = beginCell()
      .storeUint(subwalletId, 32)
      .storeUint(validUntil, 32)
      .storeUint(seqno, 32)
      .storeUint(3, 8)  // op = 3 (remove plugin)
      .storeInt(wc, 8)
      .storeUint(BigInt('0x' + hash.toString('hex')), 256)
      .storeCoins(amount)
      .storeUint(queryId, 64)
      .endCell();
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
    const signature = sign(messageBody.hash(), keyPair.secretKey);
    console.log('‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    const body = beginCell()
      .storeBuffer(signature)
      .storeSlice(messageBody.asSlice())
      .endCell();
    
    // –°–æ–∑–¥–∞–µ–º external message
    const externalMessage = beginCell()
      .storeUint(0b10, 2)  // ext_in_msg_info$10
      .storeUint(0, 2)     // src:MsgAddressExt
      .storeAddress(Address.parse(walletAddress))  // dest
      .storeCoins(0)       // import_fee
      .storeBit(0)         // no state_init
      .storeBit(1)         // body as ref
      .storeRef(body)
      .endCell();
    
    const boc = externalMessage.toBoc().toString('base64');
    console.log('‚úÖ External message —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', boc.length);
    
    return boc;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è external message:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç seqno –∫–æ—à–µ–ª—å–∫–∞
 */
async function getSeqno(walletAddress) {
  try {
    const response = await fetch(
      `https://toncenter.com/api/v2/runGetMethod?address=${walletAddress}&method=seqno`
    );
    const data = await response.json();
    
    if (data.result && data.result.stack && data.result.stack.length > 0) {
      return parseInt(data.result.stack[0][1], 16);
    }
    
    return 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è seqno:', error);
    return 0;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç external message –≤ –±–ª–æ–∫—á–µ–π–Ω
 */
export async function sendExternalMessage(boc) {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ external message...');
    
    const response = await fetch('https://toncenter.com/api/v2/sendBoc', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        boc: boc
      })
    });
    
    const data = await response.json();
    console.log('üì® –û—Ç–≤–µ—Ç –æ—Ç API:', data);
    
    if (data.ok) {
      console.log('‚úÖ External message –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return data.result;
    } else {
      throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ external message:', error);
    throw error;
  }
}

