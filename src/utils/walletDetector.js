import { TonClient, Address } from '@ton/ton';

/**
 * –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤
 */
export async function detectWalletVersion(address, client) {
    try {
        const addr = Address.parse(address);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ get-–º–µ—Ç–æ–¥–∞ get_plugin_list
        try {
            await client.runMethod(addr, 'get_plugin_list');
            return {
                version: 'v4',
                supportsPlugins: true,
                hasPluginList: true
            };
        } catch (error) {
            // –ï—Å–ª–∏ get_plugin_list –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            if (error.message.includes('exit_code')) {
                // –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø–æ –¥—Ä—É–≥–∏–º get-–º–µ—Ç–æ–¥–∞–º
                try {
                    await client.runMethod(addr, 'seqno');
                    return {
                        version: 'v3/v4',
                        supportsPlugins: false,
                        hasPluginList: false
                    };
                } catch {
                    return {
                        version: 'unknown',
                        supportsPlugins: false,
                        hasPluginList: false
                    };
                }
            }
            throw error;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏:', error);
        return {
            version: 'unknown',
            supportsPlugins: false,
            hasPluginList: false,
            error: error.message
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ v4
 * TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–µ–ø–ª–æ–π –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
 */
export async function getPluginList(address, client) {
  try {
    const addr = Address.parse(address);
    const result = await client.runMethod(addr, 'get_plugin_list');
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç get_plugin_list result:', result);
    console.log('üì¶ Stack:', result.stack);
    console.log('üìã Items:', result.stack.items);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–ª–∞–≥–∏–Ω
 */
export async function isPluginInstalled(walletAddress, pluginWc, pluginAddr, client) {
    try {
        const addr = Address.parse(walletAddress);
        const result = await client.runMethod(addr, 'is_plugin_installed', [
            { type: 'int', value: BigInt(pluginWc) },
            { type: 'int', value: BigInt('0x' + pluginAddr) }
        ]);

        return result.stack.readNumber() !== 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–≥–∏–Ω–∞:', error);
        return false;
    }
}